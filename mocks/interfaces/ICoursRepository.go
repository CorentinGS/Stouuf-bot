// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	models "github.com/corentings/stouuf-bot/models"
	mock "github.com/stretchr/testify/mock"
)

// ICoursRepository is an autogenerated mock type for the ICoursRepository type
type ICoursRepository struct {
	mock.Mock
}

// CreateCours provides a mock function with given fields: cours
func (_m *ICoursRepository) CreateCours(cours models.CoursModel) error {
	ret := _m.Called(cours)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CoursModel) error); ok {
		r0 = rf(cours)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCours provides a mock function with given fields: userID
func (_m *ICoursRepository) GetCours(userID string) (*models.CoursModel, error) {
	ret := _m.Called(userID)

	var r0 *models.CoursModel
	if rf, ok := ret.Get(0).(func(string) *models.CoursModel); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CoursModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCours provides a mock function with given fields: cours
func (_m *ICoursRepository) UpdateCours(cours models.CoursModel) error {
	ret := _m.Called(cours)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CoursModel) error); ok {
		r0 = rf(cours)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewICoursRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICoursRepository creates a new instance of ICoursRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICoursRepository(t mockConstructorTestingTNewICoursRepository) *ICoursRepository {
	mock := &ICoursRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
