// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	models "github.com/corentings/stouuf-bot/models"
	mock "github.com/stretchr/testify/mock"
)

// ICoursService is an autogenerated mock type for the ICoursService type
type ICoursService struct {
	mock.Mock
}

// AddCours provides a mock function with given fields: userID, value
func (_m *ICoursService) AddCours(userID string, value uint) error {
	ret := _m.Called(userID, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(userID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCours provides a mock function with given fields: userID
func (_m *ICoursService) GetCours(userID string) (*models.CoursModel, error) {
	ret := _m.Called(userID)

	var r0 *models.CoursModel
	if rf, ok := ret.Get(0).(func(string) *models.CoursModel); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CoursModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveCours provides a mock function with given fields: userID, value
func (_m *ICoursService) RemoveCours(userID string, value uint) error {
	ret := _m.Called(userID, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(userID, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewICoursService interface {
	mock.TestingT
	Cleanup(func())
}

// NewICoursService creates a new instance of ICoursService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICoursService(t mockConstructorTestingTNewICoursService) *ICoursService {
	mock := &ICoursService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
