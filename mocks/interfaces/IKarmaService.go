// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	models "github.com/corentings/stouuf-bot/models"
	mock "github.com/stretchr/testify/mock"
)

// IKarmaService is an autogenerated mock type for the IKarmaService type
type IKarmaService struct {
	mock.Mock
}

// AddKarma provides a mock function with given fields: userID, guildID, amount
func (_m *IKarmaService) AddKarma(userID string, guildID string, amount uint) (*models.Karma, error) {
	ret := _m.Called(userID, guildID, amount)

	var r0 *models.Karma
	if rf, ok := ret.Get(0).(func(string, string, uint) *models.Karma); ok {
		r0 = rf(userID, guildID, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Karma)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint) error); ok {
		r1 = rf(userID, guildID, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKarma provides a mock function with given fields: karma
func (_m *IKarmaService) CreateKarma(karma models.Karma) error {
	ret := _m.Called(karma)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Karma) error); ok {
		r0 = rf(karma)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetKarma provides a mock function with given fields: userID, guildID
func (_m *IKarmaService) GetKarma(userID string, guildID string) (*models.Karma, error) {
	ret := _m.Called(userID, guildID)

	var r0 *models.Karma
	if rf, ok := ret.Get(0).(func(string, string) *models.Karma); ok {
		r0 = rf(userID, guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Karma)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKarma provides a mock function with given fields: karma
func (_m *IKarmaService) UpdateKarma(karma models.Karma) error {
	ret := _m.Called(karma)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Karma) error); ok {
		r0 = rf(karma)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIKarmaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIKarmaService creates a new instance of IKarmaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIKarmaService(t mockConstructorTestingTNewIKarmaService) *IKarmaService {
	mock := &IKarmaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
